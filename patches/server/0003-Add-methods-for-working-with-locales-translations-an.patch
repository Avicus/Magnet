From 3949aa0cc9a53afba6468cace6e869d1f025e235 Mon Sep 17 00:00:00 2001
From: kashike <kashike@vq.lc>
Date: Sat, 17 Dec 2016 02:31:07 -0800
Subject: [PATCH] Add methods for working with locales/translations, and add
 methods to send components based on type

---
 .../net/minecraft/server/EntityPlayer.java    |  1 +
 .../craftbukkit/entity/CraftPlayer.java       | 48 +++++++++++++++++++
 2 files changed, 49 insertions(+)

diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 0c49a256..1e0706d8 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -1017,6 +1017,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         this.locale = packetplayinsettings.a();
         if (!this.locale.equals(oldLocale)) {
             CraftEventFactory.callPlayerLocaleChangeEvent(this, oldLocale, this.locale);
+            this.getBukkitEntity().updateLocale(this.locale);
         }
         // PaperSpigot end
         this.bR = packetplayinsettings.c();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index d44fc62b..4bfd59db 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -80,6 +80,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private double health = 20;
     private boolean scaledHealth = false;
     private double healthScale = 20;
+    private java.util.Locale cachedLocale = java.util.Locale.US; // Magnet
 
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
         super(server, entity);
@@ -1605,4 +1606,51 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return spigot;
     }
     // Spigot end
+
+    // Magnet start
+    @Override
+    public java.util.Locale getLocale() {
+        return this.cachedLocale;
+    }
+
+    public void updateLocale(String locale) {
+        this.cachedLocale = parseLocale(locale);
+    }
+
+    private static java.util.Locale parseLocale(String locale) {
+        try {
+            final String[] split = locale.split("[-_]");
+            switch (split.length) {
+                case 1: // language
+                    return new java.util.Locale(split[0]);
+                case 2: // language and country
+                    return new java.util.Locale(split[0], split[1]);
+                case 3: // language, country, and variant
+                    return new java.util.Locale(split[0], split[1], split[2]);
+            }
+        } catch (IllegalArgumentException e) {
+            // ignore
+        }
+
+        // bad locale sent?
+        return java.util.Locale.US;
+    }
+
+    @Override
+    public void sendMessage(net.md_5.bungee.api.ChatMessageType type, net.md_5.bungee.api.chat.BaseComponent component) {
+        this.sendMessage(type, new BaseComponent[] {component});
+    }
+
+    @Override
+    public void sendMessage(net.md_5.bungee.api.ChatMessageType type, net.md_5.bungee.api.chat.BaseComponent[] components) {
+        @javax.annotation.Nullable PlayerConnection connection = this.getHandle().playerConnection;
+        if (connection == null) {
+            return;
+        }
+
+        PacketPlayOutChat packet = new PacketPlayOutChat(null, (byte) type.ordinal());
+        packet.components = components;
+        connection.sendPacket(packet);
+    }
+    // Magnet end
 }
-- 
2.23.0

