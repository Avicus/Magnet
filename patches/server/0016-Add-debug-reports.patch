From 24ce3031419d18876d37b6077bf61fbf8f73b448 Mon Sep 17 00:00:00 2001
From: kashike <kashike@vq.lc>
Date: Fri, 30 Dec 2016 19:56:40 -0800
Subject: [PATCH] Add debug reports

---
 .../server/debug/ServerDebugReportProvider.java    | 75 ++++++++++++++++++++++
 .../java/org/bukkit/craftbukkit/CraftServer.java   | 10 +++
 2 files changed, 85 insertions(+)
 create mode 100644 src/main/java/net/avicus/magnet/server/debug/ServerDebugReportProvider.java

diff --git a/src/main/java/net/avicus/magnet/server/debug/ServerDebugReportProvider.java b/src/main/java/net/avicus/magnet/server/debug/ServerDebugReportProvider.java
new file mode 100644
index 00000000..260caa10
--- /dev/null
+++ b/src/main/java/net/avicus/magnet/server/debug/ServerDebugReportProvider.java
@@ -0,0 +1,75 @@
+package net.avicus.magnet.server.debug;
+
+import net.avicus.magnet.api.debug.DebugReport;
+import net.avicus.magnet.api.debug.DebugReportCategory;
+import net.avicus.magnet.api.debug.DebugReportProvider;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.Plugin;
+
+import java.lang.management.ManagementFactory;
+import java.util.Collection;
+import java.util.List;
+
+public final class ServerDebugReportProvider implements DebugReportProvider {
+
+    private static final long MB = 1024L;
+
+    @Override
+    public void fillDebugReport(DebugReport report) {
+        final DebugReportCategory server = report.createCategory("Server");
+        server.setDetail("API Version", Bukkit.getBukkitVersion());
+        server.setDetail("Server Version", Bukkit.getVersion());
+        server.setDetail("Plugins", () -> {
+            final StringBuilder sb = new StringBuilder();
+            final Plugin[] plugins = Bukkit.getPluginManager().getPlugins();
+
+            for (final Plugin plugin : plugins) {
+                if (sb.length() > 0) {
+                    sb.append(", ");
+                }
+
+                sb.append(plugin.getDescription().getName()).append(" (").append(plugin.getDescription().getVersion()).append(')');
+            }
+
+            return plugins.length + " total;  " + sb.toString();
+        });
+        server.setDetail("Players", () -> {
+            final Collection<? extends Player> players = Bukkit.getOnlinePlayers();
+            return players.size() + " total; " + players.toString();
+        });
+        server.setDetail("Worlds", () -> {
+            final List<World> worlds = Bukkit.getWorlds();
+            return worlds.size() + " total; " + worlds.toString();
+        });
+
+        final DebugReportCategory system = report.createCategory("System");
+        system.setDetail("Memory", () -> {
+            final Runtime runtime = Runtime.getRuntime();
+            final long max = runtime.maxMemory();
+            final long total = runtime.totalMemory();
+            final long free = runtime.freeMemory();
+            final long maxMB = max / MB / MB;
+            final long totalMB = total / MB / MB;
+            final long freeMB = free / MB / MB;
+            return free + " bytes (" + freeMB + " MB) / " + total + " bytes (" + totalMB + " MB) up to " + max + " bytes (" + maxMB + " MB)";
+        });
+        system.setDetail("JVM Flags", () -> {
+            final StringBuilder sb = new StringBuilder();
+
+            int size = 0;
+            for (final String arg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {
+                if (arg.startsWith("-X")) {
+                    if(size++ > 0) {
+                        sb.append(" ");
+                    }
+
+                    sb.append(arg);
+                }
+            }
+
+            return String.format("%d total; %s", size, sb.toString());
+        });
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 6fabb5c3..9595fdcb 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -165,6 +165,7 @@ public final class CraftServer implements Server {
     private final UUID invalidUserUUID = UUID.nameUUIDFromBytes("InvalidUsername".getBytes(Charsets.UTF_8));
     private final List<CraftPlayer> playerView;
     public int reloadCount;
+    private final net.avicus.magnet.api.debug.DebugReportFactory debugReportFactory = new net.avicus.magnet.api.debug.DebugReportFactory(); // Magnet
 
     private final class BooleanWrapper {
         private boolean value = true;
@@ -254,6 +255,8 @@ public final class CraftServer implements Server {
         // loadPlugins();
         // enablePlugins(PluginLoadOrder.STARTUP);
         // Spigot End
+
+        this.debugReportFactory.registerProvider(new net.avicus.magnet.server.debug.ServerDebugReportProvider()); // Magnet
     }
 
     public boolean getCommandBlockOverride(String command) {
@@ -1851,4 +1854,11 @@ public final class CraftServer implements Server {
     {
         return spigot;
     }
+
+    // Magnet start
+    @Override
+    public net.avicus.magnet.api.debug.DebugReportFactory getDebugReportFactory() {
+        return this.debugReportFactory;
+    }
+    // Magnet end
 }
-- 
2.11.0

